package com.spirit.essential.thrift.idl;

/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2019-08-19")
public class KeepAliveReq implements org.apache.thrift.TBase<KeepAliveReq, KeepAliveReq._Fields>, java.io.Serializable, Cloneable, Comparable<KeepAliveReq> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("KeepAliveReq");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CURRENT_TIMESTAMP_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("current_timestamp_req", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField NETWORK_QUALITY_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("network_quality_level", org.apache.thrift.protocol.TType.I16, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new KeepAliveReqStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new KeepAliveReqTupleSchemeFactory();

  public int id; // required
  public long current_timestamp_req; // required
  public short network_quality_level; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    CURRENT_TIMESTAMP_REQ((short)2, "current_timestamp_req"),
    NETWORK_QUALITY_LEVEL((short)3, "network_quality_level");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // CURRENT_TIMESTAMP_REQ
          return CURRENT_TIMESTAMP_REQ;
        case 3: // NETWORK_QUALITY_LEVEL
          return NETWORK_QUALITY_LEVEL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __CURRENT_TIMESTAMP_REQ_ISSET_ID = 1;
  private static final int __NETWORK_QUALITY_LEVEL_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CURRENT_TIMESTAMP_REQ, new org.apache.thrift.meta_data.FieldMetaData("current_timestamp_req", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NETWORK_QUALITY_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("network_quality_level", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(KeepAliveReq.class, metaDataMap);
  }

  public KeepAliveReq() {
  }

  public KeepAliveReq(
    int id,
    long current_timestamp_req,
    short network_quality_level)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.current_timestamp_req = current_timestamp_req;
    setCurrent_timestamp_reqIsSet(true);
    this.network_quality_level = network_quality_level;
    setNetwork_quality_levelIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public KeepAliveReq(KeepAliveReq other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.current_timestamp_req = other.current_timestamp_req;
    this.network_quality_level = other.network_quality_level;
  }

  public KeepAliveReq deepCopy() {
    return new KeepAliveReq(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setCurrent_timestamp_reqIsSet(false);
    this.current_timestamp_req = 0;
    setNetwork_quality_levelIsSet(false);
    this.network_quality_level = 0;
  }

  public int getId() {
    return this.id;
  }

  public KeepAliveReq setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public long getCurrent_timestamp_req() {
    return this.current_timestamp_req;
  }

  public KeepAliveReq setCurrent_timestamp_req(long current_timestamp_req) {
    this.current_timestamp_req = current_timestamp_req;
    setCurrent_timestamp_reqIsSet(true);
    return this;
  }

  public void unsetCurrent_timestamp_req() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CURRENT_TIMESTAMP_REQ_ISSET_ID);
  }

  /** Returns true if field current_timestamp_req is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrent_timestamp_req() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CURRENT_TIMESTAMP_REQ_ISSET_ID);
  }

  public void setCurrent_timestamp_reqIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CURRENT_TIMESTAMP_REQ_ISSET_ID, value);
  }

  public short getNetwork_quality_level() {
    return this.network_quality_level;
  }

  public KeepAliveReq setNetwork_quality_level(short network_quality_level) {
    this.network_quality_level = network_quality_level;
    setNetwork_quality_levelIsSet(true);
    return this;
  }

  public void unsetNetwork_quality_level() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NETWORK_QUALITY_LEVEL_ISSET_ID);
  }

  /** Returns true if field network_quality_level is set (has been assigned a value) and false otherwise */
  public boolean isSetNetwork_quality_level() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NETWORK_QUALITY_LEVEL_ISSET_ID);
  }

  public void setNetwork_quality_levelIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NETWORK_QUALITY_LEVEL_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case CURRENT_TIMESTAMP_REQ:
      if (value == null) {
        unsetCurrent_timestamp_req();
      } else {
        setCurrent_timestamp_req((Long)value);
      }
      break;

    case NETWORK_QUALITY_LEVEL:
      if (value == null) {
        unsetNetwork_quality_level();
      } else {
        setNetwork_quality_level((Short)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case CURRENT_TIMESTAMP_REQ:
      return getCurrent_timestamp_req();

    case NETWORK_QUALITY_LEVEL:
      return getNetwork_quality_level();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case CURRENT_TIMESTAMP_REQ:
      return isSetCurrent_timestamp_req();
    case NETWORK_QUALITY_LEVEL:
      return isSetNetwork_quality_level();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof KeepAliveReq)
      return this.equals((KeepAliveReq)that);
    return false;
  }

  public boolean equals(KeepAliveReq that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_current_timestamp_req = true;
    boolean that_present_current_timestamp_req = true;
    if (this_present_current_timestamp_req || that_present_current_timestamp_req) {
      if (!(this_present_current_timestamp_req && that_present_current_timestamp_req))
        return false;
      if (this.current_timestamp_req != that.current_timestamp_req)
        return false;
    }

    boolean this_present_network_quality_level = true;
    boolean that_present_network_quality_level = true;
    if (this_present_network_quality_level || that_present_network_quality_level) {
      if (!(this_present_network_quality_level && that_present_network_quality_level))
        return false;
      if (this.network_quality_level != that.network_quality_level)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(current_timestamp_req);

    hashCode = hashCode * 8191 + network_quality_level;

    return hashCode;
  }

  @Override
  public int compareTo(KeepAliveReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrent_timestamp_req()).compareTo(other.isSetCurrent_timestamp_req());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrent_timestamp_req()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.current_timestamp_req, other.current_timestamp_req);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNetwork_quality_level()).compareTo(other.isSetNetwork_quality_level());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNetwork_quality_level()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.network_quality_level, other.network_quality_level);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("KeepAliveReq(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("current_timestamp_req:");
    sb.append(this.current_timestamp_req);
    first = false;
    if (!first) sb.append(", ");
    sb.append("network_quality_level:");
    sb.append(this.network_quality_level);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class KeepAliveReqStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public KeepAliveReqStandardScheme getScheme() {
      return new KeepAliveReqStandardScheme();
    }
  }

  private static class KeepAliveReqStandardScheme extends org.apache.thrift.scheme.StandardScheme<KeepAliveReq> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, KeepAliveReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CURRENT_TIMESTAMP_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.current_timestamp_req = iprot.readI64();
              struct.setCurrent_timestamp_reqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NETWORK_QUALITY_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.network_quality_level = iprot.readI16();
              struct.setNetwork_quality_levelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, KeepAliveReq struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CURRENT_TIMESTAMP_REQ_FIELD_DESC);
      oprot.writeI64(struct.current_timestamp_req);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NETWORK_QUALITY_LEVEL_FIELD_DESC);
      oprot.writeI16(struct.network_quality_level);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class KeepAliveReqTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public KeepAliveReqTupleScheme getScheme() {
      return new KeepAliveReqTupleScheme();
    }
  }

  private static class KeepAliveReqTupleScheme extends org.apache.thrift.scheme.TupleScheme<KeepAliveReq> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, KeepAliveReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetCurrent_timestamp_req()) {
        optionals.set(1);
      }
      if (struct.isSetNetwork_quality_level()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetCurrent_timestamp_req()) {
        oprot.writeI64(struct.current_timestamp_req);
      }
      if (struct.isSetNetwork_quality_level()) {
        oprot.writeI16(struct.network_quality_level);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, KeepAliveReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.current_timestamp_req = iprot.readI64();
        struct.setCurrent_timestamp_reqIsSet(true);
      }
      if (incoming.get(2)) {
        struct.network_quality_level = iprot.readI16();
        struct.setNetwork_quality_levelIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

