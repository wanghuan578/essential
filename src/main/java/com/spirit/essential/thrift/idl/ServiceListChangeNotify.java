package com.spirit.essential.thrift.idl;

/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2019-08-19")
public class ServiceListChangeNotify implements org.apache.thrift.TBase<ServiceListChangeNotify, ServiceListChangeNotify._Fields>, java.io.Serializable, Cloneable, Comparable<ServiceListChangeNotify> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ServiceListChangeNotify");

  private static final org.apache.thrift.protocol.TField SERVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("service_id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SERVICE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("service_name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SERVICE_INFO_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("service_info_list", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ServiceListChangeNotifyStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ServiceListChangeNotifyTupleSchemeFactory();

  public int service_id; // required
  public String service_name; // required
  public java.util.List<ServiceInfo> service_info_list; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SERVICE_ID((short)1, "service_id"),
    SERVICE_NAME((short)2, "service_name"),
    SERVICE_INFO_LIST((short)3, "service_info_list");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SERVICE_ID
          return SERVICE_ID;
        case 2: // SERVICE_NAME
          return SERVICE_NAME;
        case 3: // SERVICE_INFO_LIST
          return SERVICE_INFO_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SERVICE_ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SERVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("service_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SERVICE_NAME, new org.apache.thrift.meta_data.FieldMetaData("service_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SERVICE_INFO_LIST, new org.apache.thrift.meta_data.FieldMetaData("service_info_list", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ServiceInfo.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ServiceListChangeNotify.class, metaDataMap);
  }

  public ServiceListChangeNotify() {
  }

  public ServiceListChangeNotify(
    int service_id,
    String service_name,
    java.util.List<ServiceInfo> service_info_list)
  {
    this();
    this.service_id = service_id;
    setService_idIsSet(true);
    this.service_name = service_name;
    this.service_info_list = service_info_list;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ServiceListChangeNotify(ServiceListChangeNotify other) {
    __isset_bitfield = other.__isset_bitfield;
    this.service_id = other.service_id;
    if (other.isSetService_name()) {
      this.service_name = other.service_name;
    }
    if (other.isSetService_info_list()) {
      java.util.List<ServiceInfo> __this__service_info_list = new java.util.ArrayList<ServiceInfo>(other.service_info_list.size());
      for (ServiceInfo other_element : other.service_info_list) {
        __this__service_info_list.add(new ServiceInfo(other_element));
      }
      this.service_info_list = __this__service_info_list;
    }
  }

  public ServiceListChangeNotify deepCopy() {
    return new ServiceListChangeNotify(this);
  }

  @Override
  public void clear() {
    setService_idIsSet(false);
    this.service_id = 0;
    this.service_name = null;
    this.service_info_list = null;
  }

  public int getService_id() {
    return this.service_id;
  }

  public ServiceListChangeNotify setService_id(int service_id) {
    this.service_id = service_id;
    setService_idIsSet(true);
    return this;
  }

  public void unsetService_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SERVICE_ID_ISSET_ID);
  }

  /** Returns true if field service_id is set (has been assigned a value) and false otherwise */
  public boolean isSetService_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SERVICE_ID_ISSET_ID);
  }

  public void setService_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SERVICE_ID_ISSET_ID, value);
  }

  public String getService_name() {
    return this.service_name;
  }

  public ServiceListChangeNotify setService_name(String service_name) {
    this.service_name = service_name;
    return this;
  }

  public void unsetService_name() {
    this.service_name = null;
  }

  /** Returns true if field service_name is set (has been assigned a value) and false otherwise */
  public boolean isSetService_name() {
    return this.service_name != null;
  }

  public void setService_nameIsSet(boolean value) {
    if (!value) {
      this.service_name = null;
    }
  }

  public int getService_info_listSize() {
    return (this.service_info_list == null) ? 0 : this.service_info_list.size();
  }

  public java.util.Iterator<ServiceInfo> getService_info_listIterator() {
    return (this.service_info_list == null) ? null : this.service_info_list.iterator();
  }

  public void addToService_info_list(ServiceInfo elem) {
    if (this.service_info_list == null) {
      this.service_info_list = new java.util.ArrayList<ServiceInfo>();
    }
    this.service_info_list.add(elem);
  }

  public java.util.List<ServiceInfo> getService_info_list() {
    return this.service_info_list;
  }

  public ServiceListChangeNotify setService_info_list(java.util.List<ServiceInfo> service_info_list) {
    this.service_info_list = service_info_list;
    return this;
  }

  public void unsetService_info_list() {
    this.service_info_list = null;
  }

  /** Returns true if field service_info_list is set (has been assigned a value) and false otherwise */
  public boolean isSetService_info_list() {
    return this.service_info_list != null;
  }

  public void setService_info_listIsSet(boolean value) {
    if (!value) {
      this.service_info_list = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SERVICE_ID:
      if (value == null) {
        unsetService_id();
      } else {
        setService_id((Integer)value);
      }
      break;

    case SERVICE_NAME:
      if (value == null) {
        unsetService_name();
      } else {
        setService_name((String)value);
      }
      break;

    case SERVICE_INFO_LIST:
      if (value == null) {
        unsetService_info_list();
      } else {
        setService_info_list((java.util.List<ServiceInfo>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SERVICE_ID:
      return getService_id();

    case SERVICE_NAME:
      return getService_name();

    case SERVICE_INFO_LIST:
      return getService_info_list();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SERVICE_ID:
      return isSetService_id();
    case SERVICE_NAME:
      return isSetService_name();
    case SERVICE_INFO_LIST:
      return isSetService_info_list();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ServiceListChangeNotify)
      return this.equals((ServiceListChangeNotify)that);
    return false;
  }

  public boolean equals(ServiceListChangeNotify that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_service_id = true;
    boolean that_present_service_id = true;
    if (this_present_service_id || that_present_service_id) {
      if (!(this_present_service_id && that_present_service_id))
        return false;
      if (this.service_id != that.service_id)
        return false;
    }

    boolean this_present_service_name = true && this.isSetService_name();
    boolean that_present_service_name = true && that.isSetService_name();
    if (this_present_service_name || that_present_service_name) {
      if (!(this_present_service_name && that_present_service_name))
        return false;
      if (!this.service_name.equals(that.service_name))
        return false;
    }

    boolean this_present_service_info_list = true && this.isSetService_info_list();
    boolean that_present_service_info_list = true && that.isSetService_info_list();
    if (this_present_service_info_list || that_present_service_info_list) {
      if (!(this_present_service_info_list && that_present_service_info_list))
        return false;
      if (!this.service_info_list.equals(that.service_info_list))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + service_id;

    hashCode = hashCode * 8191 + ((isSetService_name()) ? 131071 : 524287);
    if (isSetService_name())
      hashCode = hashCode * 8191 + service_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetService_info_list()) ? 131071 : 524287);
    if (isSetService_info_list())
      hashCode = hashCode * 8191 + service_info_list.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ServiceListChangeNotify other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetService_id()).compareTo(other.isSetService_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetService_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.service_id, other.service_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetService_name()).compareTo(other.isSetService_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetService_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.service_name, other.service_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetService_info_list()).compareTo(other.isSetService_info_list());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetService_info_list()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.service_info_list, other.service_info_list);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ServiceListChangeNotify(");
    boolean first = true;

    sb.append("service_id:");
    sb.append(this.service_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("service_name:");
    if (this.service_name == null) {
      sb.append("null");
    } else {
      sb.append(this.service_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("service_info_list:");
    if (this.service_info_list == null) {
      sb.append("null");
    } else {
      sb.append(this.service_info_list);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ServiceListChangeNotifyStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ServiceListChangeNotifyStandardScheme getScheme() {
      return new ServiceListChangeNotifyStandardScheme();
    }
  }

  private static class ServiceListChangeNotifyStandardScheme extends org.apache.thrift.scheme.StandardScheme<ServiceListChangeNotify> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ServiceListChangeNotify struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SERVICE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.service_id = iprot.readI32();
              struct.setService_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SERVICE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.service_name = iprot.readString();
              struct.setService_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SERVICE_INFO_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.service_info_list = new java.util.ArrayList<ServiceInfo>(_list0.size);
                ServiceInfo _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new ServiceInfo();
                  _elem1.read(iprot);
                  struct.service_info_list.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setService_info_listIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ServiceListChangeNotify struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SERVICE_ID_FIELD_DESC);
      oprot.writeI32(struct.service_id);
      oprot.writeFieldEnd();
      if (struct.service_name != null) {
        oprot.writeFieldBegin(SERVICE_NAME_FIELD_DESC);
        oprot.writeString(struct.service_name);
        oprot.writeFieldEnd();
      }
      if (struct.service_info_list != null) {
        oprot.writeFieldBegin(SERVICE_INFO_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.service_info_list.size()));
          for (ServiceInfo _iter3 : struct.service_info_list)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ServiceListChangeNotifyTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ServiceListChangeNotifyTupleScheme getScheme() {
      return new ServiceListChangeNotifyTupleScheme();
    }
  }

  private static class ServiceListChangeNotifyTupleScheme extends org.apache.thrift.scheme.TupleScheme<ServiceListChangeNotify> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ServiceListChangeNotify struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetService_id()) {
        optionals.set(0);
      }
      if (struct.isSetService_name()) {
        optionals.set(1);
      }
      if (struct.isSetService_info_list()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetService_id()) {
        oprot.writeI32(struct.service_id);
      }
      if (struct.isSetService_name()) {
        oprot.writeString(struct.service_name);
      }
      if (struct.isSetService_info_list()) {
        {
          oprot.writeI32(struct.service_info_list.size());
          for (ServiceInfo _iter4 : struct.service_info_list)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ServiceListChangeNotify struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.service_id = iprot.readI32();
        struct.setService_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.service_name = iprot.readString();
        struct.setService_nameIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.service_info_list = new java.util.ArrayList<ServiceInfo>(_list5.size);
          ServiceInfo _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new ServiceInfo();
            _elem6.read(iprot);
            struct.service_info_list.add(_elem6);
          }
        }
        struct.setService_info_listIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

